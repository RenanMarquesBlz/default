git config --global ( Mais sintaxe, edita permissões e configurações à nivel global, todos arquivos criados receberão as permissões nesta opção)
git config --local (edita permissões do arquivo local)
git checkout commitid ou master (volta para o arquivo especificado por commitid, o master volta para estado atual do arquivo)
<<<<<<< HEAD
git clone (repositorio)
git push (sync)
branches - Devido ao Git usar um merge de três vias, fazer o merge de um branch em outro várias vezes em um período longo é geralmente fácil de fazer. Isto significa que você pode ter vários branches que ficam sempre abertos e que são usados em diferentes estágios do seu ciclo de desenvolvimento; você pode regularmente fazer o merge de alguns deles em outros.

Muitos desenvolvedores Git tem um fluxo de trabalho que adotam essa abordagem, como ter somente código completamente estável em seus branches master — possivelmente somente código que já foi ou será liberado. Eles têm outro branch paralelo chamado develop ou algo parecido em que eles trabalham ou usam para testar estabilidade — ele não é necessariamente sempre estável, mas quando ele chega a tal estágio, pode ser feito o merge com o branch master. Ele é usado para puxar (pull) branches tópicos (topic, branches de curta duração, como o seu branch iss53 anteriormente) quando eles estão prontos, para ter certeza que eles passam em todos os testes e não acrescentam erros.

Na realidade, nós estamos falando de ponteiros avançando na linha de commits que você está fazendo. Os branches estáveis estão muito atrás na linha histórica de commits, e os branches de ponta (que estão sendo trabalhados) estão a frente no histórico
=======
git pull - (atualiza localmente os  arquivos do github)
>>>>>>> a702c1da8624bd55000a6f05e791ab40fc36ed2f
git branch - (cria uma nova "linha do tempo" para realizar commits alternativos sem prejudicar a linha que esta em funcionamento)
git checkout ( alterna entre as branches para realizar os commits)

